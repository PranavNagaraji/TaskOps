-- ======================================
--  SCHEMA: sms_user
--  CLEANED TABLES, SEQUENCES & TRIGGERS
-- ======================================

-- ==== Tables ====

CREATE TABLE USERS (
    ID NUMBER PRIMARY KEY,
    NAME VARCHAR2(100),
    EMAIL VARCHAR2(100) UNIQUE,
    PASSWORD_HASH VARCHAR2(255),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ROLE VARCHAR2(50) DEFAULT 'customer',
    PHONE VARCHAR2(15)
);

CREATE TABLE CUSTOMERS (
    CUSTOMER_ID NUMBER PRIMARY KEY,
    NAME VARCHAR2(100) NOT NULL,
    PHONE NUMBER(15),
    EMAIL VARCHAR2(50) UNIQUE,
    ADDRESS VARCHAR2(100),
    USER_ID NUMBER,
    CONSTRAINT FK_CUSTOMERS_USERS FOREIGN KEY (USER_ID)
        REFERENCES USERS(ID) ON DELETE CASCADE
);

CREATE TABLE EMPLOYEES (
    EMPLOYEE_ID NUMBER PRIMARY KEY,
    NAME VARCHAR2(100) NOT NULL,
    PHONE NUMBER(15),
    EMAIL VARCHAR2(100) UNIQUE,
    ROLE VARCHAR2(50),
    HIRE_DATE DATE DEFAULT SYSDATE,
    STATUS VARCHAR2(20) DEFAULT 'Active',
    USER_ID NUMBER,
    CONSTRAINT FK_EMPLOYEES_USERS FOREIGN KEY (USER_ID)
        REFERENCES USERS(ID) ON DELETE CASCADE
);

CREATE TABLE SERVICES (
    SERVICE_ID NUMBER PRIMARY KEY,
    NAME VARCHAR2(100) NOT NULL,
    DESCRIPTION VARCHAR2(500),
    COST NUMBER(10,2),
    STATUS VARCHAR2(10) DEFAULT 'Active',
    DURATION NUMBER
);

CREATE TABLE REQUESTS (
    REQUEST_ID NUMBER PRIMARY KEY,
    CUSTOMER_ID NUMBER NOT NULL,
    SERVICE_ID NUMBER NOT NULL,
    STATUS VARCHAR2(20) DEFAULT 'Pending',
    CREATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP,
    CLOSED_AT TIMESTAMP,
    CONSTRAINT FK_REQUESTS_CUSTOMER FOREIGN KEY (CUSTOMER_ID)
        REFERENCES CUSTOMERS(CUSTOMER_ID) ON DELETE CASCADE,
    CONSTRAINT FK_REQUESTS_SERVICE FOREIGN KEY (SERVICE_ID)
        REFERENCES SERVICES(SERVICE_ID) ON DELETE CASCADE
);

CREATE TABLE ASSIGNMENTS (
    ASSIGNMENT_ID NUMBER PRIMARY KEY,
    REQUEST_ID NUMBER NOT NULL,
    EMPLOYEE_ID NUMBER NOT NULL,
    ASSIGNED_AT TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    COMPLETED_AT TIMESTAMP,
    CONSTRAINT FK_ASSIGNMENT_REQUEST FOREIGN KEY (REQUEST_ID)
        REFERENCES REQUESTS(REQUEST_ID) ON DELETE CASCADE,
    CONSTRAINT FK_ASSIGNMENT_EMPLOYEE FOREIGN KEY (EMPLOYEE_ID)
        REFERENCES EMPLOYEES(EMPLOYEE_ID) ON DELETE CASCADE
);

-- ==== Sequences (start from 1) ====

CREATE SEQUENCE USERS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE CUSTOMER_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE EMPLOYEES_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SERVICES_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE REQUESTS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE ASSIGNMENTS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;

-- ==== Triggers ====

CREATE OR REPLACE TRIGGER USERS_BEFORE_INSERT
BEFORE INSERT ON USERS
FOR EACH ROW
BEGIN
    :NEW.ID := USERS_SEQ.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER CUSTOMER_BEFORE_INSERT
BEFORE INSERT ON CUSTOMERS
FOR EACH ROW
BEGIN
    :NEW.CUSTOMER_ID := CUSTOMER_SEQ.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER EMPLOYEES_BEFORE_INSERT
BEFORE INSERT ON EMPLOYEES
FOR EACH ROW
BEGIN
    :NEW.EMPLOYEE_ID := EMPLOYEES_SEQ.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER SERVICES_BEFORE_INSERT
BEFORE INSERT ON SERVICES
FOR EACH ROW
BEGIN
    :NEW.SERVICE_ID := SERVICES_SEQ.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER REQUESTS_BEFORE_INSERT
BEFORE INSERT ON REQUESTS
FOR EACH ROW
BEGIN
    :NEW.REQUEST_ID := REQUESTS_SEQ.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER ASSIGNMENTS_BEFORE_INSERT
BEFORE INSERT ON ASSIGNMENTS
FOR EACH ROW
BEGIN
    :NEW.ASSIGNMENT_ID := ASSIGNMENTS_SEQ.NEXTVAL;
END;
/